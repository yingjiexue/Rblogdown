blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
update.packages(ask = FALSE, checkBuilt = TRUE)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
install.packages(c("arm", "backports", "bookdown", "broom", "bslib", "cachem", "car", "cli", "colorspace", "corpcor", "cpp11", "curl", "data.table", "digest", "dplyr", "DT", "ellipsis", "fansi", "fastICA", "flextable", "float", "future", "future.apply", "generics", "ggplot2", "gt", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "installr", "isoband", "jpeg", "jquerylib", "knitr", "later", "lavaan", "lgr", "lifecycle", "lme4", "lubridate", "maptools", "matrixcalc", "matrixStats", "maxLik", "mime", "misc3d", "mongolite", "mvtnorm", "officer", "OpenMx", "openssl", "openxlsx", "packrat", "parallelly", "pbapply", "pglm", "pillar", "plm", "plot3D", "psych", "qgraph", "quantreg", "R6", "rbibutils", "Rcpp", "RcppArmadillo", "Rdpack", "readr", "regsem", "remotes", "renv", "reprex", "reticulate", "RhpcBLASctl", "rio", "rJava", "rlang", "rlist", "rmarkdown", "rpf", "rsconnect", "rvest", "sandwich", "sass", "sem", "servr", "shiny", "snow", "stringi", "systemfonts", "tibble", "tidyfst", "tidyr", "tidyselect", "tidytext", "tinytex", "utf8", "uuid", "vctrs", "viridis", "xfun", "XML", "zip"))
install.packages(c("arm", "backports", "bookdown", "broom", "bslib", "cachem", "car", "cli", "colorspace", "corpcor", "cpp11", "curl", "data.table", "digest", "dplyr", "DT", "ellipsis", "fansi", "fastICA", "flextable", "float", "future", "future.apply", "generics", "ggplot2", "gt", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "installr", "isoband", "jpeg", "jquerylib", "knitr", "later", "lavaan", "lgr", "lifecycle", "lme4", "lubridate", "maptools", "matrixcalc", "matrixStats", "maxLik", "mime", "misc3d", "mongolite", "mvtnorm", "officer", "OpenMx", "openssl", "openxlsx", "packrat", "parallelly", "pbapply", "pglm", "pillar", "plm", "plot3D", "psych", "qgraph", "quantreg", "R6", "rbibutils", "Rcpp", "RcppArmadillo", "Rdpack", "readr", "regsem", "remotes", "renv", "reprex", "reticulate", "RhpcBLASctl", "rio", "rJava", "rlang", "rlist", "rmarkdown", "rpf", "rsconnect", "rvest", "sandwich", "sass", "sem", "servr", "shiny", "snow", "stringi", "systemfonts", "tibble", "tidyfst", "tidyr", "tidyselect", "tidytext", "tinytex", "utf8", "uuid", "vctrs", "viridis", "xfun", "XML", "zip"))
install.packages(c("arm", "backports", "bookdown", "broom", "bslib", "cachem", "car", "cli", "colorspace", "corpcor", "cpp11", "curl", "data.table", "digest", "dplyr", "DT", "ellipsis", "fansi", "fastICA", "flextable", "float", "future", "future.apply", "generics", "ggplot2", "gt", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "installr", "isoband", "jpeg", "jquerylib", "knitr", "later", "lavaan", "lgr", "lifecycle", "lme4", "lubridate", "maptools", "matrixcalc", "matrixStats", "maxLik", "mime", "misc3d", "mongolite", "mvtnorm", "officer", "OpenMx", "openssl", "openxlsx", "packrat", "parallelly", "pbapply", "pglm", "pillar", "plm", "plot3D", "psych", "qgraph", "quantreg", "R6", "rbibutils", "Rcpp", "RcppArmadillo", "Rdpack", "readr", "regsem", "remotes", "renv", "reprex", "reticulate", "RhpcBLASctl", "rio", "rJava", "rlang", "rlist", "rmarkdown", "rpf", "rsconnect", "rvest", "sandwich", "sass", "sem", "servr", "shiny", "snow", "stringi", "systemfonts", "tibble", "tidyfst", "tidyr", "tidyselect", "tidytext", "tinytex", "utf8", "uuid", "vctrs", "viridis", "xfun", "XML", "zip"))
blogdown:::new_post_addin()
blogdown:::new_post_addin()
remove.packages("Rcpp", lib="~/R/win-library/4.0")
install.packages("Rcpp")
blogdown:::new_post_addin()
remove.packages("htmltools", lib="~/R/win-library/4.0")
install.packages("htmltools")
install.packages("htmltools")
blogdown:::new_post_addin()
install.packages("htmltools")
install.packages("htmltools")
blogdown:::new_post_addin()
remove.packages("sass", lib="~/R/win-library/4.0")
install.packages("sass")
blogdown:::new_post_addin()
?file()
file('D:\s交电费.txt')
file('D:\s交电费.txt',"r")
file('D:/交电费.txt',"r")
a=file('D:/kdfjf-交电费.txt',"r")
a
blogdown:::new_post_addin()
blogdown:::new_post_addin
check_config()
blogdown::check_hugo()
blogdown::clean_duplicates()
blogdown::check_config()
blogdown::update_hugo()
blogdown::install_hugo()
blogdown::install_hugo
blogdown::new_post
blogdown::new_post()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
a=file(D:\Rblogdown\content\post\2021-10-28-鎵撻鏈篭\index.md, "r")
a=file(D:/Rblogdown/content/post/2021-10-28-鎵撻鏈篭/index.md, "r")
a=file('D:/Rblogdown/content/post/2021-10-28-鎵撻鏈篭/index.md', "r")
a=file('D:/Rblogdown/content/post/2021-10-28-打飞机/index.md', "r")
a
new_post_addin
blogdown:::new_post_addin
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
remove.packages("blogdown", lib="~/R/win-library/4.0")
install_hugo()
install.packages("blogdown")
install.packages("blogdown")
install_hugo()
blogdown:::serve_site()
remove.packages("blogdown", lib="~/R/win-library/4.0")
remotes::install_github('rstudio/blogdown')
blogdown::check_site()
blogdown::config_netlify()
blogdown::check_site()
blogdown::config_Rprofile()
blogdown::check_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
install.packages("webshot")
webshot::install_phantomjs()
blogdown:::serve_site()
install.packages("C:/Users/yingjie/Desktop/rlang_1.0.4.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/yingjie/Desktop/rlang_1.0.4.zip", repos = NULL, type = "win.binary")
library(plantuml)
plantuml_update()
install.packages("plantuml")
install.packages("devtools")
devtools::install_github("rkrug/plantuml")
library(plantuml)
plantuml_update()
library(plantuml)
plantuml_update()
x <- list(
a = 1:10,
b = letters[1:4],
c = data.frame(
x = 1:10,
y = c(TRUE, FALSE)
)
)
plot(
as.plantuml(x)
)
library(plantuml)
plantuml_update()
install.packages("C:/Users/yingjie/Downloads/plantuml-jar-gplv2-1.2022.7.zip", repos = NULL, type = "win.binary")
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update
?plantuml_update
system.file('C:/Users/yingjie/Downloads/plantuml-jar-gplv2-1.2022.7.zip', package = "plantuml")
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
plantuml_update()
?download.file()
getOption('timeout')
options(timeout=1000)
plantuml_update()
x <- list(
a = 1:10,
b = letters[1:4],
c = data.frame(
x = 1:10,
y = c(TRUE, FALSE)
)
)
plot(
as.plantuml(x)
)
library(plantuml)
plantuml_update()
library(plantuml)
x <- '
(*) --> "Initialization"
if "Some Test" then
-->[true] "Some Activity"
--> "Another activity"
-right-> (*)
else
->[false] "Something else"
-->[Ending process] (*)
endif
'
x <- plantuml(
x
)
plot(
x = x
# vector = TRUE
)
plot(
x = x
# vector = TRUE
)
?grImport::PostScriptTrace()
install.packages("grImport")
install.packages("grImport")
plot(
x = x
# vector = TRUE
)
library(plantuml)
x <- '
(*) --> "Initialization"
if "Some Test" then
-->[true] "Some Activity"
--> "Another activity"
-right-> (*)
else
->[false] "Something else"
-->[Ending process] (*)
endif
'
x <- plantuml(
x
)
plot(
x = x
# vector = TRUE
)
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
remove.packages("stargazer")
devtools::install_github("yingjiexue/stargazer")
library(stargazer)
?stargazer
output  <- lm(delay ~ temp + wind + precip, data = both)
output2 <- lm(delay ~ temp + wind + precip + quarter, data = both)
# Instrumental variables model
output3 <- ivreg(delay ~ temp + wind + precip | . - temp + hot, data = both)
library("dplyr")
library("nycflights13")
library("AER") # Applied Econometrics with R
library("stargazer")
output  <- lm(delay ~ temp + wind + precip, data = both)
output2 <- lm(delay ~ temp + wind + precip + quarter, data = both)
# Instrumental variables model
output3 <- ivreg(delay ~ temp + wind + precip | . - temp + hot, data = both)
daily <- flights %>%
filter(origin == "EWR") %>%
group_by(year, month, day) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE))
daily_weather <- weather %>%
filter(origin == "EWR") %>%
group_by(year, month, day) %>%
summarise(temp   = mean(temp, na.rm = TRUE),
wind   = mean(wind_speed, na.rm = TRUE),
precip = sum(precip, na.rm = TRUE))
# Merge flights with weather data frames
both <- daily %>%
inner_join(y = daily_weather, by = c("year", "month", "day")) %>%
data.frame()  # Temporary fix
# Create an indicator for quarter
both$quarter <- cut(both$month, breaks = c(0, 3, 6, 9, 12),
labels = c("1", "2", "3", "4"))
# Create a vector of class logical
both$hot <- as.logical(both$temp > 85)
library("dplyr")
library("nycflights13")
library("AER") # Applied Econometrics with R
library("stargazer")
daily <- flights %>%
filter(origin == "EWR") %>%
group_by(year, month, day) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE))
daily_weather <- weather %>%
filter(origin == "EWR") %>%
group_by(year, month, day) %>%
summarise(temp   = mean(temp, na.rm = TRUE),
wind   = mean(wind_speed, na.rm = TRUE),
precip = sum(precip, na.rm = TRUE))
# Merge flights with weather data frames
both <- daily %>%
inner_join(y = daily_weather, by = c("year", "month", "day")) %>%
data.frame()  # Temporary fix
# Create an indicator for quarter
both$quarter <- cut(both$month, breaks = c(0, 3, 6, 9, 12),
labels = c("1", "2", "3", "4"))
# Create a vector of class logical
both$hot <- as.logical(both$temp > 85)
daily <- flights %>%
filter(origin == "EWR") %>%
group_by(year, month, day) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE))
## list the content of the data frame 'attitude'
stargazer(attitude, summary=FALSE)
##  2 OLS models
linear.1 <- lm(rating ~ complaints + privileges + learning
+ raises + critical, data=attitude)
linear.2 <- lm(rating ~ complaints + privileges + learning, data=attitude)
## create an indicator dependent variable, and run a probit model
attitude$high.rating <- (attitude$rating > 70)
probit.model <- glm(high.rating ~ learning + critical + advance, data=attitude,
family = binomial(link = "probit"))
stargazer(linear.1, linear.2, probit.model, title="Regression Results")
## list the content of the data frame 'attitude'
stargazer(attitude, summary=FALSE)
##  2 OLS models
linear.1 <- lm(rating ~ complaints + privileges + learning
+ raises + critical, data=attitude)
linear.2 <- lm(rating ~ complaints + privileges + learning, data=attitude)
## create an indicator dependent variable, and run a probit model
attitude$high.rating <- (attitude$rating > 70)
probit.model <- glm(high.rating ~ learning + critical + advance, data=attitude,
family = binomial(link = "probit"))
stargazer(linear.1, linear.2, probit.model, type = "html",
report = "vct*", title="Regression Results")
## list the content of the data frame 'attitude'
stargazer(attitude, summary=FALSE)
##  2 OLS models
linear.1 <- lm(rating ~ complaints + privileges + learning
+ raises + critical, data=attitude)
linear.2 <- lm(rating ~ complaints + privileges + learning, data=attitude)
## create an indicator dependent variable, and run a probit model
attitude$high.rating <- (attitude$rating > 70)
probit.model <- glm(high.rating ~ learning + critical + advance, data=attitude,
family = binomial(link = "probit"))
stargazer(linear.1, linear.2, probit.model, type = "html",
report = "vct*", title="Regression Results",out="dfi.html")
blogdown:::serve_site()
blogdown:::serve_site()
word_document2
libr
library(bookdown)
word_document2
markdown_document2
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("disqusR")
library(disqusR)
install.packages("disqusR")
install.packages("disqusR")
install.packages("disqusR")
remotes::install_github("JanMarvin/disqusR")
blogdown:::serve_site()
library(disqusR)
disqusR::users()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
output:
rblogdown::html_page:
comments: true
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(shiny)
library(htmltools)
ui <- fluidPage(
HTML("<iframe src='http://www.etf.group/data/list1.html#type=1' width='100%' height='500'></iframe>")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
library(htmltools)
ui <- fluidPage(
HTML("<iframe src='http://www.etf.group/data/list1.html#type=1' width='100%' height='100%'></iframe>")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
library(htmltools)
ui <- fluidPage(
HTML("<iframe src='http://www.etf.group/data/list1.html#type=1' width='100%' height='100%'></iframe>")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
library(htmltools)
ui <- fluidPage(
HTML("<iframe src='http://www.etf.group/data/list1.html#type=1' width='100%' height='2000'></iframe>")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
library(htmltools)
ui <- fluidPage(
HTML("<iframe src='http://www.etf.group/data/list1.html#type=1' width='100%' height='1000'></iframe>")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
library(htmltools)
ui <- fluidPage(
HTML("<iframe src='http://www.etf.group/data/list1.html#type=1' width='100%' height='800'></iframe>")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
library(htmltools)
ui <- fluidPage(
HTML("<iframe src='http://www.etf.group/data/list1.html#type=1' width='100%' height='1000'></iframe>")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
library(htmltools)
ui <- fluidPage(
HTML("<iframe src='http://www.etf.group/data/list1.html#type=1' width='100%' height='900'></iframe>")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
data(crime4,package = "wooldridge")
css = crime4 %>%
filter(county %in% c(1,3,145, 23))|>
select(county,year,prbarr,crmrte)|>
mutate(county=county,wto=ifelse(county%in%c(1,3),0,1),
dyear=ifelse(year>84,0,1))# subset to 4 counties
library(stargazer)
?stargazer::stargazer()
trace(stargazer,edit = T)
trace(stargazer:::stargazer,edit = T)
trace(stargazer:::stargazer,edit = T)
trace(stargazer::stargazer,edit = T)
trace(stargazer::stargazer.stargazer.wrap,edit = T)
trace(stargazer:::.stargazer.wrap,edit = T)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(torch)
t1<-torch_tensor(1)
install_torch()
library(torch)
t1<-torch_tensor(1)
t1
t1$dtype
t1$device
t1$shape
torch_device(type='cuda', index=0)
t2 <- t1$to(dtype = torch_int())
t2$dtype
# only applicable if you have a GPU
t2 <- t1$to(device = "cuda")
t2$device
t3 <- t1$view(c(1, 1))
t3$shape
torch_tensor(1:5)
torch_tensor(1:5)
torch_tensor(1:5,dtype=torch_float())
torch_tensor(1:5,device="cuda")
torch_tensor(matrix(1:9, ncol = 3, byrow = TRUE))
torch_tensor(array(1:24, dim = c(4, 3, 2)))
array(1:24, dim = c(4, 3, 2))
torch_randn(3, 3)
torch_randn(3, 3)
torch_randn(3, 3)
torch_ones(2, 2)
torch_zeros(2, 5)
torch_zeros(2, 5,4)
torch_eye(n = 5)
torch_diag(n = 5)
torch_diag(c(1, 2, 3))
JohnsonJohnson
torch_tensor(JohnsonJohnson)
t1 <- torch_tensor(c(1, 2))
t2 <- torch_tensor(c(3, 4))
torch_add(t1, t2)
# equivalently
t1$add(t2)
t1$add_(t2)
t1
t1 <- torch_tensor(1:3)
t2 <- torch_tensor(4:6)
t1$dot(t2)
1:3
4:6
t1 <- torch_tensor(1:3)
t2 <- torch_tensor(4:6)
t1$t()$dot(t2)
t1
t1 <- torch_tensor(1:3)
t3 <- torch_tensor(matrix(1:12, ncol = 3, byrow = TRUE))
t3$matmul(t1)
torch_multiply(t1, t2)
m <- outer(1:3, 1:6)
sum(m)
apply(m, 1, sum)
apply(m, 2, sum)
library(torch)
t <- torch_outer(torch_tensor(1:3), torch_tensor(1:6))
t$sum()
t$sum(dim = 1)
t$sum(dim = 2)
t <- torch_randn(4, 3, 2)
t
t$mean(dim = c(1, 2))
t$mean(dim = 2)
t <- torch_tensor(matrix(1:9, ncol = 3, byrow = TRUE))
t[1, ]
t[1, , drop = FALSE]
t <- torch_rand(3, 3, 3)
t[1:2, 2:3, c(1, 3)]
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
